# 7: ms_q_learning_model_seperate_lr.stan
# 8: ms_q_learning_model_seperate_lr_perseveration.stan
# 9: ms_q_learning_model_seperate_lr_perseveration_unique_bandits_heuristic.stan
# 10: ms_q_learning_model_seperate_lr_perseveration_trials_not_chosen_heuristic.stan
# 11: ms_q_learning_model_seperate_lr_unique_bandits_heuristic.stan
# 12: ms_q_learning_model_seperate_lr_trials_not_chosen_heuristic.stan
model_names = c("KM","KMP","KMUP", "KMTP", "KMU", "KMT")
# 13: ms_kalman_model.stan
# 14: ms_kalman_model_p.stan
# 15: ms_kalman_model_up.stan
# 16: ms_kalman_model_tp.stan
# 17: ms_kalman_model_u.stan
# 18: ms_kalman_model_t.stan
model_ids = c(13:18)
rnn_ids = c(0:19)
walk = 3
n_trials = 300
# par(mfrow=c(3,1))
# get waic's
waic_matrix = matrix(NA, nrow = length(rnn_ids), ncol = length(model_ids))
for (m in c(1:length(model_ids))){
for (i in rnn_ids){
file = sprintf(file_string ,model_ids[m], i,walk)
load(paste0(path_to_stanfit, file))
ll = extract_log_lik(stanfit$stanfit, parameter_name = "log_lik", merge_chains = TRUE)
# print(i)
# print(hist(unlist(extract(stanfit$stanfit, pars = 'phi')), main =  sprintf('%s',i)))
waic_object = loo::waic(ll)
waic_matrix[i+1, m] = waic_object$estimates['waic','Estimate']
}
}
# get delta waic's
for (row in c(1:nrow(waic_matrix))){
m_waic = min(waic_matrix[row,])
waic_matrix[row,] = waic_matrix[row,] - m_waic
}
# plot
boxplot(waic_matrix, ylab = 'Delta(WAIC)', names = model_names)
# best model
apply(waic_matrix,2,median)
################################################
# percent correct                              #
################################################
best_model_matrix = waic_matrix == 0
perc_best <- apply(best_model_matrix, 2, mean)
barplot(perc_best, ylab = '% Best model', names.arg = model_names,  cex.names=0.7)
###############################
# choice predictive accuracy  #
###############################
# get accuracy
acc_matrix = array(NA ,dim = c(length(rnn_ids), length(model_ids), n_trials))
for (m in c(1:length(model_ids))){
for (i in rnn_ids){
# load stanfit and get predicted choices
file = sprintf(file_string ,model_ids[m], i,walk)
load(paste0(path_to_stanfit, file))
pred_choices = extract_log_lik(stanfit$stanfit, parameter_name = "predicted_choices", merge_chains = TRUE)
# load data and get observed choices
load(stanfit$data)
obs_choices = res$choices
# get accuracy
acc_im = apply(pred_choices, 1, function(x) x==obs_choices[1,])
acc_im = t(acc_im)
# View(rbind(acc_im[500,], pred_choices[500,], obs_choices[1,]))
# mean accuracy over iterations for id and model
mean_acc_im = apply(acc_im, 2, mean)
acc_matrix[i+1, m, ] = mean_acc_im
}
}
acc_matrix_im = apply(acc_matrix, c(1,2), mean)
# plot acc for each model
boxplot(acc_matrix_im, ylab = '% predicted choice accuracy', names = model_names)
# plot accuracy over trials
# plot(acc_matrix[1,4,], type = 'l')
acc_matrix = array(NA ,dim = c(length(rnn_ids), length(model_ids)))
par(mfrow=c(1, length(rnn_ids)))
file = sprintf(file_string ,model_ids[m], i,walk)
load(paste0(path_to_stanfit, file))
ll = extract_log_lik(stanfit$stanfit, parameter_name = "phi", merge_chains = TRUE)
print(hist(unlist(extract(stanfit$stanfit, pars = 'phi')), main =  sprintf('%s',i)))
library(rstan)
ll = rstan::extract(stanfit$stanfit, parameter_name = "phi", merge_chains = TRUE)
phi = rstan::extract(stanfit$stanfit, pars = "phi", merge_chains = TRUE)
phi = rstan::extract(stanfit$stanfit, pars = "phi")
print(hist(unlist(extract(stanfit$stanfit, pars = 'phi')), main =  sprintf('%s',i)))
print(hist(unlist(extract(stanfit$stanfit, pars = 'phi')), main =  sprintf('%s',i)))
print(hist(unlist(extract(stanfit$stanfit, pars = 'phi')), main =  sprintf('%s',i)))
unlist(extract(stanfit$stanfit, pars = 'phi')
)
print(hist(unlist(extract(stanfit$stanfit, pars = 'phi')), main =  sprintf('%s',i)))
par(mfrow=c(length(rnn_ids)), 1)
par(mfrow=c(length(rnn_ids)), 1)
par(mfrow=c(length(rnn_ids), 1))
for (m in c(1:length(model_ids))){
for (i in rnn_ids){
file = sprintf(file_string ,model_ids[m], i,walk)
load(paste0(path_to_stanfit, file))
phi = rstan::extract(stanfit$stanfit, pars = "phi")
print(hist(unlist(extract(stanfit$stanfit, pars = 'phi')), main =  sprintf('%s',i)))
waic_object = loo::waic(ll)
waic_matrix[i+1, m] = waic_object$estimates['waic','Estimate']
}
}
print(hist(unlist(extract(stanfit$stanfit, pars = 'phi')), main =  sprintf('%s',i)))
m=15
file = sprintf(file_string ,model_ids[m], i,walk)
load(paste0(path_to_stanfit, file))
file
m = 15
model_ids[m]
model_ids = c(13:18)
m= 2
file = sprintf(file_string ,model_ids[m], i,walk)
load(paste0(path_to_stanfit, file))
print(hist(unlist(extract(stanfit$stanfit, pars = 'phi')), main =  sprintf('%s',i)))
print(stanfit$stanfit)
m = 3
file = sprintf(file_string ,model_ids[m], i,walk)
load(paste0(path_to_stanfit, file))
print(hist(unlist(extract(stanfit$stanfit, pars = 'phi')), main =  sprintf('%s',i)))
print(hist(unlist(extract(stanfit$stanfit, pars = 'phi')), main =  sprintf('%s',i)))
print(hist(unlist(extract(stanfit$stanfit, pars = 'phi')), main =  sprintf('%s',i)))
print(hist(unlist(extract(stanfit$stanfit, pars = 'phi')), main =  sprintf('%s',i)))
print(barplot(unlist(extract(stanfit$stanfit, pars = 'phi')), main =  sprintf('%s',i)))
print(boxplot(unlist(extract(stanfit$stanfit, pars = 'phi')), main =  sprintf('%s',i)))
matrix(NA, nrow = 500, ncol = length(rnn_ids))
phi_mat = matrix(NA, nrow = 500, ncol = length(rnn_ids))
model_ids = c(15:18)
model_ids = c(15)
for (m in c(1:length(model_ids))){
for (i in rnn_ids){
file = sprintf(file_string ,model_ids[m], i,walk)
load(paste0(path_to_stanfit, file))
# print(boxplot(unlist(extract(stanfit$stanfit, pars = 'phi')), main =  sprintf('%s',i)))
#
phi_mat[,i] = unlist(extract(stanfit$stanfit, pars = 'phi'))
}
}
boxplot(phi_mat)
hline(0)
abline(h = 0)
abline(h = 0, lty = 1)
abline(h = 0, lty = 2)
abline(h = 0, lty = 3)
boxplot(phi_mat)
abline(h = 0, lty = 3)
boxplot(phi_mat)
abline(h = 0, lty = 2)
abline(h = 0, lty = 2, col = 'red')
boxplot(phi_mat)
abline(h = 0, lty = 2, col = 'red')
?boxplot
boxplot(phi_mat, horizontal = TRUE)
abline(h = 0, lty = 2, col = 'red')
boxplot(phi_mat, horizontal = TRUE)
abline(v = 0, lty = 2, col = 'red')
boxplot(phi_mat, horizontal = TRUE, main = 'phi')
abline(v = 0, lty = 2, col = 'red')
model_ids = c(16)
for (m in c(1:length(model_ids))){
for (i in rnn_ids){
file = sprintf(file_string ,model_ids[m], i,walk)
load(paste0(path_to_stanfit, file))
# print(boxplot(unlist(extract(stanfit$stanfit, pars = 'phi')), main =  sprintf('%s',i)))
#
phi_mat[,i] = unlist(extract(stanfit$stanfit, pars = 'phi'))
}
}
boxplot(phi_mat, horizontal = TRUE, main = 'phi')
abline(v = 0, lty = 2, col = 'red')
model_ids = c(17)
for (m in c(1:length(model_ids))){
for (i in rnn_ids){
file = sprintf(file_string ,model_ids[m], i,walk)
load(paste0(path_to_stanfit, file))
# print(boxplot(unlist(extract(stanfit$stanfit, pars = 'phi')), main =  sprintf('%s',i)))
#
phi_mat[,i] = unlist(extract(stanfit$stanfit, pars = 'phi'))
}
}
boxplot(phi_mat, horizontal = TRUE, main = 'phi')
abline(v = 0, lty = 2, col = 'red')
model_ids = c(18)
for (m in c(1:length(model_ids))){
for (i in rnn_ids){
file = sprintf(file_string ,model_ids[m], i,walk)
load(paste0(path_to_stanfit, file))
# print(boxplot(unlist(extract(stanfit$stanfit, pars = 'phi')), main =  sprintf('%s',i)))
#
phi_mat[,i] = unlist(extract(stanfit$stanfit, pars = 'phi'))
}
}
boxplot(phi_mat, horizontal = TRUE, main = 'phi')
abline(v = 0, lty = 2, col = 'red')
# set working dir to dir where R-file resides
setwd(file.path(dirname(rstudioapi::getSourceEditorContext()$path)))
# move up two directories
setwd('../')
# load packages
library(loo)
library(rstan)
path_to_stanfit = 'data/intermediate_data/modeling/modeling_fits/'
file_string = 'stan_fit_m_%s_d_lstm_a2c_nh_48_lr_0_0001_n_n_p_0_ew_0_05_vw_0_5_dr_0_5_res_d_f_p_0_1_rt_con_a_4_n_300_te_50000_id_%s_test_b_daw_p_%s.RData'
model_ids = c(13:18)
rnn_ids = c(0:19)
walk = 3
n_trials = 300
waic_matrix = matrix(NA, nrow = length(rnn_ids), ncol = length(model_ids))
waic_matrix = matrix(NA, nrow = length(rnn_ids), ncol = length(model_ids))
for (m in c(1:length(model_ids))){
for (i in rnn_ids){
file = sprintf(file_string ,model_ids[m], i,walk)
load(paste0(path_to_stanfit, file))
ll = extract_log_lik(stanfit$stanfit, parameter_name = "log_lik", merge_chains = TRUE)
# print(i)
# print(hist(unlist(extract(stanfit$stanfit, pars = 'phi')), main =  sprintf('%s',i)))
waic_object = loo::waic(ll)
waic_matrix[i+1, m] = waic_object$estimates['waic','Estimate']
}
}
for (row in c(1:nrow(waic_matrix))){
m_waic = min(waic_matrix[row,])
waic_matrix[row,] = waic_matrix[row,] - m_waic
}
boxplot(waic_matrix, ylab = 'Delta(WAIC)', names = model_names)
# best model
apply(waic_matrix,2,median)
best_model_matrix = waic_matrix == 0
perc_best <- apply(best_model_matrix, 2, mean)
barplot(perc_best, ylab = '% Best model', names.arg = model_names,  cex.names=0.7)
acc_matrix = array(NA ,dim = c(length(rnn_ids), length(model_ids), n_trials))
# load stanfit and get predicted choices
file = sprintf(file_string ,model_ids[m], i,walk)
load(paste0(path_to_stanfit, file))
pred_choices = extract_log_lik(stanfit$stanfit, parameter_name = "predicted_choices", merge_chains = TRUE)
# load data and get observed choices
load(stanfit$data)
obs_choices = res$choices
pred_choices
pred_choices1 = extract_log_lik(stanfit$stanfit, parameter_name = "predicted_choices", merge_chains = TRUE)
# load data and get observed choices
load(stanfit$data)
obs_choices = res$choices
# get accuracy
acc_im = apply(pred_choices, 1, function(x) x==obs_choices[1,])
acc_im
pred_choices = extract_log_lik(stanfit$stanfit, parameter_name = "predicted_choices", merge_chains = TRUE)
pred_choices1 = rstan::extract(stanfit$stanfit, pars = "predicted_choices")
dim(predicted_choices)
str(predicted_choices)
str(predi_choices)
str(pred_choices)
str(pred_choices1)
dim(pred_choices1)
length(pred_choices1)
length(pred_choices1)
length(pred_choices1[1])
length(pred_choices1)
pred_choices1
as.matrix(pred_choices1)
as.array(pred_choices1)
dim(pred_choices1$predicted_choices)
dim(pred_choices)
dim(pred_choices1$predicted_choices)
dim(pred_choices1$predicted_choices[,1,])
pred_choices1 = pred_choices1$predicted_choices[,1,]
identical(pred_choices, pred_choices1)
pred_choices - pred_choices1
cbind(pred_choices[1,], pred_choices1[1,])
pred_choices1
dim(pred_choices1)
dim(pred_choices)
cbind(pred_choices[1,], pred_choices1[1,])
pred_choices = rstan::extract(stanfit$stanfit, pars = "predicted_choices")
# drop chain dimension
pred_choices = pred_choices1$predicted_choices[,1,]
# drop chain dimension
pred_choices = pred_choices1$predicted_choices[,1,]
pred_choices = rstan::extract(stanfit$stanfit, pars = "predicted_choices")
# drop chain dimension
pred_choices = pred_choices1$predicted_choices[,1,]
# drop chain dimension
pred_choices = pred_choices$predicted_choices[,1,]
pred_choices
dim(pred_choices)
# load data and get observed choices
load(stanfit$data)
obs_choices = res$choices
acc_matrix = array(NA ,dim = c(length(rnn_ids), length(model_ids), n_trials))
for (m in c(1:length(model_ids))){
for (i in rnn_ids){
# load stanfit and get predicted choices
file = sprintf(file_string ,model_ids[m], i,walk)
load(paste0(path_to_stanfit, file))
pred_choices = rstan::extract(stanfit$stanfit, pars = "predicted_choices")
# drop chain dimension
pred_choices = pred_choices$predicted_choices[,1,]
# load data and get observed choices
load(stanfit$data)
obs_choices = res$choices
# get accuracy
acc_im = apply(pred_choices, 1, function(x) x==obs_choices[1,])
acc_im = t(acc_im)
# View(rbind(acc_im[500,], pred_choices[500,], obs_choices[1,]))
# mean accuracy over iterations for id and model
mean_acc_im = apply(acc_im, 2, mean)
acc_matrix[i+1, m, ] = mean_acc_im
}
}
acc_matrix_im = apply(acc_matrix, c(1,2), mean)
# plot acc for each model
boxplot(acc_matrix_im, ylab = '% predicted choice accuracy', names = model_names)
# load stanfit and get predicted choices
file = sprintf(file_string ,model_ids[m], i,walk)
load(paste0(path_to_stanfit, file))
pred_choices = rstan::extract(stanfit$stanfit, pars = "predicted_choices")
# drop chain dimension
pred_choices = pred_choices$predicted_choices[,1,]
# load data and get observed choices
load(stanfit$data)
obs_choices = res$choices
obs_choices
dim(obs_choices)
dim(obs_choices[1,])
length(obs_choices[1,])
obs_choices
obs_choices[1,]
acc_im = apply(pred_choices, 1, function(x) x==obs_choices[1,])
acc_im
dim(acc_im)
mean(acc_im[1,])
mean(acc_im[,1])
mean(acc_im[,2])
mean(acc_im[,4])
mean(acc_im[1,])
pred_choices
pred_choices[1,]
dim(pred_choices)
pred_choices[1,]
pred_choices[1,]==obs_choices[1,]
mean(pred_choices[1,]==obs_choices[1,])
acc_im = t(acc_im)
mean(acc_im)
mean(acc_im[1,])
dim(acc_im)
# mean accuracy over iterations for id and model
mean_acc_im = apply(acc_im, 2, mean)
mean_acc_im
length(mean_acc_im)
acc_im
mean(acc_im,1)
mean(acc_im[1,])
dim(acc_im)
# mean accuracy over iterations for id and model
mean_acc_im = apply(acc_im, 1, mean)
mean_acc_im
# mean accuracy for each sample
mean_acc_im = apply(acc_im, 1, mean)
# get accuracy
acc_matrix = array(NA ,dim = c(length(rnn_ids), length(model_ids), n_trials))
for (m in c(1:length(model_ids))){
for (i in rnn_ids){
# load stanfit and get predicted choices
file = sprintf(file_string ,model_ids[m], i,walk)
load(paste0(path_to_stanfit, file))
pred_choices = rstan::extract(stanfit$stanfit, pars = "predicted_choices")
# drop chain dimension
pred_choices = pred_choices$predicted_choices[,1,]
# load data and get observed choices
load(stanfit$data)
obs_choices = res$choices
# get accuracy for each sample
acc_im = apply(pred_choices, 1, function(x) x==obs_choices[1,])
# transpose to matrix with dim: n_samples X n_trials
acc_im = t(acc_im)
# mean accuracy for each sample
mean_acc_im = apply(acc_im, 1, mean)
acc_matrix[i+1, m, ] = mean_acc_im
}
}
nean_acc_im
mean_acc_im
n_samples = 500
acc_matrix = array(NA ,dim = c(length(rnn_ids), length(model_ids), n_samples))
for (m in c(1:length(model_ids))){
for (i in rnn_ids){
# load stanfit and get predicted choices
file = sprintf(file_string ,model_ids[m], i,walk)
load(paste0(path_to_stanfit, file))
pred_choices = rstan::extract(stanfit$stanfit, pars = "predicted_choices")
# drop chain dimension
pred_choices = pred_choices$predicted_choices[,1,]
# load data and get observed choices
load(stanfit$data)
obs_choices = res$choices
# get accuracy for each sample
acc_im = apply(pred_choices, 1, function(x) x==obs_choices[1,])
# transpose to matrix with dim: n_samples X n_trials
acc_im = t(acc_im)
# mean accuracy for each sample
mean_acc_im = apply(acc_im, 1, mean)
acc_matrix[i+1, m, ] = mean_acc_im
}
}
dim(acc_matrix)
acc_matrix_im
acc_matrix_im = apply(acc_matrix, c(1,2), mean)
dim(acc_matrix)
dim(acc_matrix_im)
# plot acc for each model
boxplot(acc_matrix_im, ylab = '% predicted choice accuracy', names = model_names)
# plot acc for each model
boxplot(acc_matrix_im, ylab = '% predicted choice accuracy', names = model_names)
acc_matrix = array(NA ,dim = c(length(rnn_ids), length(model_ids), n_samples, n_trials))
# load stanfit and get predicted choices
file = sprintf(file_string ,model_ids[m], i,walk)
load(paste0(path_to_stanfit, file))
pred_choices = rstan::extract(stanfit$stanfit, pars = "predicted_choices")
# drop chain dimension
pred_choices = pred_choices$predicted_choices[,1,]
# load data and get observed choices
load(stanfit$data)
obs_choices = res$choices
# get accuracy for each sample
acc_im = apply(pred_choices, 1, function(x) x==obs_choices[1,])
# transpose to matrix with dim: n_samples X n_trials
acc_im = t(acc_im)
m
i+1
acc_matrix[i+1, m, ] = acc_im
dim(acc_matrix)
acc_matrix
acc_matrix = array(NA ,dim = c(length(rnn_ids), length(model_ids), n_samples, n_trials))
for (m in c(1:length(model_ids))){
for (i in rnn_ids){
# load stanfit and get predicted choices
file = sprintf(file_string ,model_ids[m], i,walk)
load(paste0(path_to_stanfit, file))
pred_choices = rstan::extract(stanfit$stanfit, pars = "predicted_choices")
# drop chain dimension
pred_choices = pred_choices$predicted_choices[,1,]
# load data and get observed choices
load(stanfit$data)
obs_choices = res$choices
# get accuracy for each sample
acc_im = apply(pred_choices, 1, function(x) x==obs_choices[1,])
# transpose to matrix with dim: n_samples X n_trials
acc_im = t(acc_im)
# mean accuracy for each sample
#mean_acc_im = apply(acc_im, 1, mean)
acc_matrix[i+1, m, ] = acc_im
}
}
acc_matrix = array(NA ,dim = c(length(rnn_ids), length(model_ids), n_samples, n_trials))
for (m in c(1:length(model_ids))){
for (i in rnn_ids){
# load stanfit and get predicted choices
file = sprintf(file_string ,model_ids[m], i,walk)
load(paste0(path_to_stanfit, file))
pred_choices = rstan::extract(stanfit$stanfit, pars = "predicted_choices")
# drop chain dimension
pred_choices = pred_choices$predicted_choices[,1,]
# load data and get observed choices
load(stanfit$data)
obs_choices = res$choices
# get accuracy for each sample
acc_im = apply(pred_choices, 1, function(x) x==obs_choices[1,])
# transpose to matrix with dim: n_samples X n_trials
acc_im = t(acc_im)
# mean accuracy for each sample
#mean_acc_im = apply(acc_im, 1, mean)
acc_matrix[i+1, m, ,] = acc_im
}
}
acc_matrix
dim(acc_matrix)
acc_matrix_im = apply(acc_matrix, c(1,2), mean)
dim(acc_matrix_im)
# plot acc for each model
boxplot(acc_matrix_im, ylab = '% predicted choice accuracy', names = model_names)
acc_matrix_im = apply(acc_matrix, c(1,2), mean)
# plot acc for each model
boxplot(acc_matrix_im, ylab = '% predicted choice accuracy', names = model_names)
acc_matrix_im[]
acc_matrix_im
# accuracy for each id and each model over n_trials & over n_samples
acc_matrix_im = apply(acc_matrix, c(1,2), mean)
acc_matrix_t = apply(acc_matrix, c(2,4), mean)
dim(acc_matrix_t)
plot(acc_matrix_t)
acc_matrix_t
plot(acc_matrix_t[1,])
plot(acc_matrix_t[1,], lty = '1')
plot(acc_matrix_t[1,], lty = 1)
plot(acc_matrix_t[1,], lty = 2)
plot(acc_matrix_t[1,], lty = 3)
plot(acc_matrix_t[1,], lty = 'l')
plot(acc_matrix_t[1,], type = 'l')
model_ids
model_ids[-1:]
model_ids[-1,]
model_ids[-1]
for m_i in 2:length(model_ids))
plot(acc_matrix_t[1,], type = 'l')
for (m_i in 2:length(model_ids)){
lines(acc_matrix, col = m_i)
}
plot(acc_matrix_t[1,], type = 'l')
for (m_i in 2:length(model_ids)){
lines(acc_matrix[m_i,], col = m_i)
}
plot(acc_matrix_t[1,], type = 'l')
