load("C:/Users/Bio_Psych/Desktop/Ben/DDM_MAI_21 (1)/__DDM/all_subjects_2step_Hierarch_DDMs_PHI_1604.RData")
fit_2step_DDM_S_phi
options(max.print = 10000)
fit_2step_DDM_S_phi
#load necessary packages
library(tidyverse)
library(readr)
library(dplyr)
library(Rlab)
library(ggplot2)
library(R2jags)
install.packages("rjags")
library(rjags)
library(R2jags)
r.version
R --version
version
install.packages("jags")
install.packages("rjags")
library(R2jags)
library(rjags)
library("rjags")
install.packages("rjags")
library(rjags)
version
version
library(R2jags)
library("rjags")
version
version
install.packages("rjags")
library(rjags)
library(rjags)
getwd()
rm(rjags)
rm("rjags"#)
remove.packages(rjags)
remove.packages("rjags")
library(rjags)
install.packages("rjags")
library(rjags)
# set working dir to dir where R-file resides
setwd(file.path(dirname(rstudioapi::getSourceEditorContext()$path)))
# move up two directories
setwd('../')
# load packages
library(loo)
library(rstan)
library(Hmisc)
path_to_stanfit = 'data/intermediate_data/modeling/modeling_fits/'
path_to_stanfit = 'data/intermediate_data/modeling/modeling_fits/'
file_string = 'stan_fit_m_%s_d_chakroun_placebo_human_bandit_data_id_%s.RData'
# model_ids = c(1:6)
model_ids = c(1:9)
rnn_ids = c(1:31)
rnn_ids = c(1:31)
# n_walks = 3
n_trials = 300
n_samples = 500
model_names = c("1LR","1LRP","1LRPU", "1LRPT", "1LRU", "1LRT", "1LRDP","1LRDPU", "1LRDPT")
model_names = c("1LR","1LRP","1LRPU", "1LRPT", "1LRU", "1LRT", "1LRDP","1LRDPU", "1LRDPT")
waic_matrix = matrix(NA, nrow = n_walks*length(rnn_ids), ncol = length(model_ids))
for (m in c(1:length(model_ids))){
for (walk in c(1:n_walks)){
for (i in rnn_ids){
file = sprintf(file_string ,model_ids[m], i,walk)
load(paste0(path_to_stanfit, file))
ll = extract_log_lik(stanfit$stanfit, parameter_name = "log_lik", merge_chains = TRUE)
waic_object = loo::waic(ll)
waic_matrix[(walk-1)*length(rnn_ids)+i+1, m] = waic_object$estimates['waic','Estimate']
}
}
}
waic_matrix = matrix(NA, nrow = n_walks*length(rnn_ids), ncol = length(model_ids))
for (m in c(1:length(model_ids))){
# for (walk in c(1:n_walks)){
for (i in rnn_ids){
file = sprintf(file_string ,model_ids[m], i)#,walk)
load(paste0(path_to_stanfit, file))
ll = extract_log_lik(stanfit$stanfit, parameter_name = "log_lik", merge_chains = TRUE)
waic_object = loo::waic(ll)
waic_matrix[(walk-1)*length(rnn_ids)+i+1, m] = waic_object$estimates['waic','Estimate']
}
}
file = sprintf(file_string ,model_ids[m], i)#,walk)
file
load(paste0(path_to_stanfit, file))
extract_log_lik(stanfit$stanfit, parameter_name = "log_lik", merge_chains = TRUE)
ll = extract_log_lik(stanfit$stanfit, parameter_name = "log_lik", merge_chains = TRUE)
ll
loo::waic(ll)
ll
is.na(ll)
which(is.na(ll))
ll[is.na(ll)]=0
# insert 0 for na
ll[is.na(ll)]=0
waic_object = loo::waic(ll)
waic_matrix[(walk-1)*length(rnn_ids)+i+1, m] = waic_object$estimates['waic','Estimate']
n_walks = 1
waic_matrix = matrix(NA, nrow = n_walks*length(rnn_ids), ncol = length(model_ids))
for (m in c(1:length(model_ids))){
# for (walk in c(1:n_walks)){
for (i in rnn_ids){
file = sprintf(file_string ,model_ids[m], i)#,walk)
load(paste0(path_to_stanfit, file))
ll = extract_log_lik(stanfit$stanfit, parameter_name = "log_lik", merge_chains = TRUE)
# insert 0 for na
ll[is.na(ll)]=0
waic_object = loo::waic(ll)
waic_matrix[(walk-1)*length(rnn_ids)+i+1, m] = waic_object$estimates['waic','Estimate']
}
}
waic_matrix = matrix(NA, nrow = n_walks*length(rnn_ids), ncol = length(model_ids))
for (m in c(1:length(model_ids))){
# for (walk in c(1:n_walks)){
for (i in rnn_ids){
file = sprintf(file_string ,model_ids[m], i)#,walk)
load(paste0(path_to_stanfit, file))
ll = extract_log_lik(stanfit$stanfit, parameter_name = "log_lik", merge_chains = TRUE)
# insert 0 for na
ll[is.na(ll)]=0
waic_object = loo::waic(ll)
# waic_matrix[(walk-1)*length(rnn_ids)+i+1, m] = waic_object$estimates['waic','Estimate']
waic_matrix[i, m] = waic_object$estimates['waic','Estimate']
}
}
warnings()
for (row in c(1:nrow(waic_matrix))){
m_waic = min(waic_matrix[row,])
waic_matrix[row,] = waic_matrix[row,] - m_waic
}
boxplot(waic_matrix, ylab = 'Delta(WAIC)', names = model_names)
boxplot(waic_matrix, ylab = 'Delta(WAIC)', names = model_names)
best_model_matrix = waic_matrix == 0
perc_best <- apply(best_model_matrix, 2, mean)
barplot(perc_best, ylab = '% Best model', names.arg = model_names,  cex.names=0.7)
acc_matrix = array(NA ,dim = c(n_walks*length(rnn_ids), length(model_ids), n_samples, n_trials))
for (m in c(1:length(model_ids))){
for (walk in c(1:n_walks)){
for (i in rnn_ids){
# load stanfit and get predicted choices
file = sprintf(file_string ,model_ids[m], i,walk)
load(paste0(path_to_stanfit, file))
pred_choices = rstan::extract(stanfit$stanfit, pars = "predicted_choices")
# drop chain dimension
pred_choices = pred_choices$predicted_choices[,1,]
# load data and get observed choices
load(stanfit$data)
obs_choices = res$choices
# get accuracy for each sample
acc_im = apply(pred_choices, 1, function(x) x==obs_choices[1,])
# transpose to matrix with dim: n_samples X n_trials
acc_im = t(acc_im)
# mean accuracy for each sample
#mean_acc_im = apply(acc_im, 1, mean)
acc_matrix[(walk-1)*length(rnn_ids)+i+1, m, ,] = acc_im
}
}
}
warnings()
for (m in c(1:length(model_ids))){
for (walk in c(1:n_walks)){
for (i in rnn_ids){
# load stanfit and get predicted choices
file = sprintf(file_string ,model_ids[m], i)#,walk)
load(paste0(path_to_stanfit, file))
pred_choices = rstan::extract(stanfit$stanfit, pars = "predicted_choices")
# drop chain dimension
pred_choices = pred_choices$predicted_choices[,1,]
# load data and get observed choices
load(stanfit$data)
obs_choices = res$choices
# get accuracy for each sample
acc_im = apply(pred_choices, 1, function(x) x==obs_choices[1,])
# transpose to matrix with dim: n_samples X n_trials
acc_im = t(acc_im)
# mean accuracy for each sample
#mean_acc_im = apply(acc_im, 1, mean)
acc_matrix[(walk-1)*length(rnn_ids)+i+1, m, ,] = acc_im
}
}
}
acc_matrix = array(NA ,dim = c(n_walks*length(rnn_ids), length(model_ids), n_samples, n_trials))
for (m in c(1:length(model_ids))){
for (walk in c(1:n_walks)){
for (i in rnn_ids){
# load stanfit and get predicted choices
file = sprintf(file_string ,model_ids[m], i)#,walk)
load(paste0(path_to_stanfit, file))
pred_choices = rstan::extract(stanfit$stanfit, pars = "predicted_choices")
# drop chain dimension
pred_choices = pred_choices$predicted_choices[,1,]
# load data and get observed choices
load(stanfit$data)
obs_choices = res$choices
# get accuracy for each sample
acc_im = apply(pred_choices, 1, function(x) x==obs_choices[1,])
# transpose to matrix with dim: n_samples X n_trials
acc_im = t(acc_im)
# mean accuracy for each sample
#mean_acc_im = apply(acc_im, 1, mean)
#acc_matrix[(walk-1)*length(rnn_ids)+i+1, m, ,] = acc_im
acc_matrix[i, m, ,] = acc_im
}
}
}
# accuracy for each id and each model over n_trials & over n_samples
acc_matrix_im = apply(acc_matrix, c(1,2), mean)
boxplot(acc_matrix_im, ylab = '% predicted choice accuracy', names = model_names)
model_ids
m
pred_choices
pred_choices
dim(pred_choices)
pred_choices$predicted_choices[,1,]
pred_choices
# drop chain dimension
#pred_choices = pred_choices$predicted_choices[,1,]
pred_choices = pred_choices$predicted_choices
pred_choices
# load data and get observed choices
load(stanfit$data)
obs_choices = res$choices
obs_choices
obs_choices
obs_choices[1,]
obs_choices[i,]
i
dim(obs_choices)
# get accuracy for each sample
# acc_im = apply(pred_choices, 1, function(x) x==obs_choices[1,])
acc_im = apply(pred_choices, 1, function(x) x==obs_choices[i,])
# transpose to matrix with dim: n_samples X n_trials
acc_im = t(acc_im)
acc_matrix = array(NA ,dim = c(n_walks*length(rnn_ids), length(model_ids), n_samples, n_trials))
for (m in c(1:length(model_ids))){
for (walk in c(1:n_walks)){
for (i in rnn_ids){
# load stanfit and get predicted choices
file = sprintf(file_string ,model_ids[m], i)#,walk)
load(paste0(path_to_stanfit, file))
pred_choices = rstan::extract(stanfit$stanfit, pars = "predicted_choices")
# drop chain dimension
#pred_choices = pred_choices$predicted_choices[,1,]
# load data and get observed choices
load(stanfit$data)
obs_choices = res$choices
# get accuracy for each sample
# acc_im = apply(pred_choices, 1, function(x) x==obs_choices[1,])
acc_im = apply(pred_choices, 1, function(x) x==obs_choices[i,])
# transpose to matrix with dim: n_samples X n_trials
acc_im = t(acc_im)
# mean accuracy for each sample
#mean_acc_im = apply(acc_im, 1, mean)
#acc_matrix[(walk-1)*length(rnn_ids)+i+1, m, ,] = acc_im
acc_matrix[i, m, ,] = acc_im
}
}
}
i
obs_choices[1,]
pred_choices
# load stanfit and get predicted choices
file = sprintf(file_string ,model_ids[m], i)#,walk)
load(paste0(path_to_stanfit, file))
pred_choices = rstan::extract(stanfit$stanfit, pars = "predicted_choices")
# load data and get observed choices
load(stanfit$data)
obs_choices = res$choices
# get accuracy for each sample
# acc_im = apply(pred_choices, 1, function(x) x==obs_choices[1,])
acc_im = apply(pred_choices, 1, function(x) x==obs_choices[i,])
pred_choices
as.vector(pred_choices)
dim(pred_choices)
dim(pred_choices$predicted_choices)
# drop chain dimension
pred_choices = pred_choices$predicted_choices[,1,]
# load data and get observed choices
load(stanfit$data)
obs_choices = res$choices
# get accuracy for each sample
# acc_im = apply(pred_choices, 1, function(x) x==obs_choices[1,])
acc_im = apply(pred_choices, 1, function(x) x==obs_choices[i,])
# transpose to matrix with dim: n_samples X n_trials
acc_im = t(acc_im)
acc_matrix = array(NA ,dim = c(n_walks*length(rnn_ids), length(model_ids), n_samples, n_trials))
for (m in c(1:length(model_ids))){
for (walk in c(1:n_walks)){
for (i in rnn_ids){
# load stanfit and get predicted choices
file = sprintf(file_string ,model_ids[m], i)#,walk)
load(paste0(path_to_stanfit, file))
pred_choices = rstan::extract(stanfit$stanfit, pars = "predicted_choices")
# drop chain dimension
pred_choices = pred_choices$predicted_choices[,1,]
# load data and get observed choices
load(stanfit$data)
obs_choices = res$choices
# get accuracy for each sample
# acc_im = apply(pred_choices, 1, function(x) x==obs_choices[1,])
acc_im = apply(pred_choices, 1, function(x) x==obs_choices[i,])
# transpose to matrix with dim: n_samples X n_trials
acc_im = t(acc_im)
# mean accuracy for each sample
#mean_acc_im = apply(acc_im, 1, mean)
#acc_matrix[(walk-1)*length(rnn_ids)+i+1, m, ,] = acc_im
acc_matrix[i, m, ,] = acc_im
}
}
}
# accuracy for each id and each model over n_trials & over n_samples
acc_matrix_im = apply(acc_matrix, c(1,2), mean)
boxplot(acc_matrix_im, ylab = '% predicted choice accuracy', names = model_names)
acc_matrix_im
colMeans(acc_matrix_im)
file = sprintf(file_string ,8, i)#,walk)
load(paste0(path_to_stanfit, file))
stanfit$stanfit
